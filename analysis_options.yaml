# 이 파일은 오류, 경고 및 줄 바꿈이 있는지 확인하기 위해 Dart 코드를 정적으로 분석하는 분석기를 구성합니다.
#
# 분석기가 식별한 문제는 Dart 지원 IDE의 UI에 표시됩니다(https://dart.dev/tools#ides-and-editors).
# 분석기는 명령줄에서 `flutter analyze`를 실행하여 호출할 수도 있습니다.
#
# 이 파일에 대한 추가 정보는 https://dart.dev/guides/language/analysis-options 에서 확인할 수 있습니다.

# 다음 줄은 올바른 코딩 관행을 장려하기 위해 설계된 Flutter 앱, 패키지 및 플러그인에 대한 권장 린트 집합을 활성화합니다.
include: flutter_lints.yaml

linter:
  # 이 프로젝트에 적용되는 린트 규칙은 아래 섹션에서 사용자 정의하여 위에 포함된 `package:flutter_lints/flutter.yaml`의 규칙을 비활성화하거나 추가 규칙을 활성화할 수 있습니다.
  # 사용 가능한 모든 린트 리스트와 해당 설명서는 https://dart.dev/lints 에 게시되어 있습니다.
  #
  # 아래 섹션에서 전체 프로젝트에 대한 린트 규칙을 비활성화하는 대신 린트를 생성하는 코드 줄 또는 파일에서
  # `// ignore: name_of_lint` 또는 `// ignore_for_file: name_of_lint`
  # 구문을 사용하여 한 줄의 코드 또는 특정 다트 파일에 대해 린트 규칙을 비활성화할 수도 있습니다.

  rules:
    ##########################
    ### Incompatible rules ###
    ##########################

    # `always_specify_types` 규칙은 `avoid_types_on_closure_parameters`, `omit_local_variable_types`, `omit_obvious_local_variable_types`, `omit_obvious_property_types` 규칙들과 호환되지 않습니다.
    always_specify_types: false
    # `avoid_types_on_closure_parameters` 규칙은 `always_specify_types` 규칙과 호환되지 않습니다.
    avoid_types_on_closure_parameters: false
    # `prefer_final_parameters` 규칙은 `unnecessary_final` 규칙과 호환되지 않습니다.
    prefer_final_parameters: false
    # `avoid_final_parameters` 규칙은 `prefer_final_parameters` 규칙과 호환되지 않습니다.
    avoid_final_parameters: false
    # `unnecessary_final` 규칙은 `prefer_final_locals`, `prefer_final_parameters`, `prefer_final_in_for_each` 규칙들과 호환되지 않습니다.
    unnecessary_final: false
    # `prefer_relative_imports` 규칙은 `always_use_package_imports` 규칙과 호환되지 않습니다.
    prefer_relative_imports: false
    # `prefer_double_quotes` 규칙은 `prefer_single_quotes` 규칙과 호환되지 않습니다.
    prefer_double_quotes: false
    # `specify_nonobvious_local_variable_types` 규칙은 `omit_local_variable_types` 규칙과 호환되지 않습니다.
    specify_nonobvious_local_variable_types: false
    # `omit_obvious_property_types` 규칙은 `always_specify_types`, `type_annotate_public_apis` 규칙들과 호환되지 않습니다.
    omit_obvious_property_types: false

    #########################
    ### Customized Styles ###
    #########################

    # 화살표 함수는 간략한 함수에만 적용하는 것이 좋습니다.
    prefer_expression_function_bodies: false
    # 프로젝트 진행 중에 변경하기에는 너무 많은 코드를 수정해야 합니다.
    always_put_required_named_parameters_first: false
    # 여러 사람이 협업하는 프로젝트에만 적합합니다.
    flutter_style_todos: false
    # 대부분의 상황에서 Exception만 핸들링하지만, 특정 상황에서는 Error도 핸들링해야 합니다.
    avoid_catches_without_on_clauses: false
    # 80자 제한 규칙은 불필요한 줄바꿈을 너무 많이 만듭니다.
    lines_longer_than_80_chars: false
    # 특정 케이스에서는 Dynamic 타입을 사용해야 합니다.
    avoid_annotating_with_dynamic: false
    # 너무 많은 보일러플레이트 코드를 생성합니다.
    diagnostic_describe_all_properties: false
    # 상태 변경 시에 항상 named parameter로 boolean을 업데이트하기는 어렵습니다.
    avoid_positional_boolean_parameters: false
    # 일반적인 앱에서 모든 퍼블릭 멤버에 대해 문서화를 할 필요는 없습니다.
    public_member_api_docs: false
    # `import_sorter` 패키지를 사용하면 이 린트가 경고를 발생시킵니다.
    directives_ordering: false
    # 특정 케이스에서 인스턴스 멤버나 메소드가 없는 클래스도 유용할 수 있습니다.
    avoid_classes_with_only_static_members: false
    # 일부 케이스에서는 CONSTANT_CASE가 더 적합합니다.
    constant_identifier_names: false
    # go_router 등 일부 패키지에서는 라우팅에 컨텍스트를 사용해야 합니다.
    use_build_context_synchronously: false
    # 프록시 클래스를 사용하는 경우 이 규칙을 비활성화해야 합니다.
    one_member_abstracts: false
    # `await` 키워드를 사용하지 않고 Future를 리턴하는 함수를 인지하지 못합니다.
    unnecessary_async: false
    # 제네릭 타입을 사용하는 경우 이 규칙을 비활성화해야 합니다.
    unsafe_variance: false

analyzer:
  exclude:
    # Retrofit 코드 생성 파일을 분석하지 않도록 설정
    - lib/data/api/*.g.dart
    # - "**/*.g.dart"
    # - "**/*.freezed.dart"
  plugins:
    - custom_lint
  language:
    # null 가능한 값을 null 불가능한 유형으로 캐스팅하지 마세요.
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
  errors:
    #########################
    # Enhanced Error Levels #
    #########################
    # 코드 내에서 사용되지 않는 클래스, 메소드, 필드 등의 요소를 식별할 때 발생합니다.
    unused_element: error
    # 선언되었으나 코드 내에서 사용되지 않는 필드를 식별할 때 발생합니다.
    unused_field: error
    # 함수 또는 메소드 내에서 선언되었으나 사용되지 않는 지역 변수를 식별할 때 발생합니다.
    unused_local_variable: error
    # import 문에서 명시적으로 보여주기 위해 선언된 이름이 실제로 사용되지 않을 때 발생합니다.
    unused_shown_name: error
    # 파일에서 임포트되었으나 임포트된 선언이 전혀 사용되지 않을 때 발생합니다.
    unused_import: error
    # 함수나 메소드의 결과가 반환되었으나 사용되지 않을 때 발생합니다.
    unused_result: error
    # 불필요한 Null 체크에 대한 경고를 활성화합니다.
    unnecessary_null_checks: warning
    # 생성자에서 선언되었으나 생성자 내부에서 사용되지 않는 매개변수를 식별할 때 발생합니다.
    avoid_unused_constructor_parameters: error
    # 예외를 캐치했으나 캐치 블록 내에서 예외 객체가 사용되지 않을 때 발생합니다.
    unused_catch_clause: error
    # 원시 타입에 대한 연산이 실제로 아무런 효과가 없을 때 발생합니다.
    noop_primitive_operations: error

    ###########################
    # Ignored Redundant Rules #
    ###########################
    # include 섹션의 'flutter_lints.yaml' 파일의 충돌하는 린터 옵션에 대한 경고
    included_file_warning: ignore
    # Freezed를 json_serializable과 함께 사용하려면 invalid_annotation_target 경고를 비활성화
    invalid_annotation_target: ignore
    # @Deprecated로 주석이 달린 요소는 해당 요소가 선언된 패키지 내에서 참조해서는 안 됩니다.
    deprecated_member_use_from_same_package: ignore
    # 메소드의 타입 인수를 유추할 수 없습니다. 메소드에 명시적인 타입 인수를 사용하세요.
    inference_failure_on_function_invocation: ignore
    # 진단이 무시되는 이유를 설명하는 문서가 누락되었습니다. 무시 댓글 바로 위에 댓글을 추가해 보세요.
    document_ignores: ignore
    # 수신자가 불필요하게 중복되었습니다. 중복을 피하려면 캐스케이드를 사용해 보세요.
    cascade_invocations: ignore

# 코드 포맷터 설정
formatter:
  # 코드를 자동으로 포맷팅할 때 사용할 줄 너비를 지정합니다.
  # https://codewithandrea.com/articles/new-formatting-style-dart-3-7
  page_width: 120
